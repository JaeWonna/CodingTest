from collections import deque

n = int(input())
board = [[0]*(n+1) for _ in range(n+1)]
apple = [[0]*(n+1) for _ in range(n+1)]
dx = [-1,0,1,0]
dy = [0,1,0,-1]
direction = []
direct = 1
bam = deque()
time = 0

def direct_value(c):
    global direct
    if c == 'L':
        direct -= 1
        if direct == -1:
            direct = 3
    elif c == 'D':
        direct += 1
        if direct == 4:
            direct = 0

k = int(input())
for i in range(k):
    a,b = map(int,input().split())
    apple[a][b] = 1

d = int(input())
for i in range(d):
    c,d = input().split()
    direction.append((int(c),d))

bam.append((1,1))

# 앞서서 동일한 변수를 사용했다면 오류가 발생할 수 있다
x,y = 1,1
while True:
    time += 1
    nx = x + dx[direct]
    ny = y + dy[direct]

    if nx < 1 or nx > n or ny < 1 or ny > n:
        break
    if (nx,ny) in bam:
        break
    if apple[nx][ny] != 1:
        bam.popleft()
    elif apple[nx][ny] == 1:
        apple[nx][ny] = 0 # 사과를 먹으면 사과가 사라진다
    bam.append((nx,ny))
    x,y = nx,ny
    
    for d in direction:
        if time == d[0]:
            direct_value(d[1])

print(time)
